async function checkEnvironment() {
  console.log('üîç Verificando configuraci√≥n del entorno...\n');

  // Variables de entorno cr√≠ticas
  console.log('üìã Variables de entorno:');
  console.log(`NODE_ENV: ${process.env.NODE_ENV || 'undefined'}`);
  console.log(`DATABASE_URL: ${process.env.DATABASE_URL ? '***configurada***' : 'NO CONFIGURADA ‚ö†Ô∏è'}`);
  console.log(`JWT_SECRET: ${process.env.JWT_SECRET ? '***configurada***' : 'NO CONFIGURADA ‚ö†Ô∏è'}`);
  console.log(`PORT: ${process.env.PORT || '3000 (default)'}`);

  // Verificar si DATABASE_URL tiene el formato correcto
  if (process.env.DATABASE_URL) {
    try {
      const url = new URL(process.env.DATABASE_URL);
      console.log(`‚úÖ DATABASE_URL formato v√°lido`);
      console.log(`üìç Host: ${url.hostname}`);
      console.log(`üìç Puerto: ${url.port}`);
      console.log(`üìç Base de datos: ${url.pathname.slice(1)}`);
    } catch (error) {
      console.log(`‚ùå DATABASE_URL formato inv√°lido: ${error.message}`);
    }
  }

  console.log('\nüîß Configuraci√≥n de Prisma:');
  console.log(`Provider: postgresql`);
  console.log(`Generate client: prisma-client-js`);

  console.log('\nüì¶ Verificando dependencias cr√≠ticas...');
  const criticalPackages = ['@prisma/client', 'bcrypt', '@nestjs/jwt'];
  criticalPackages.forEach(pkg => {
    console.log(`‚úÖ ${pkg}: disponible`);
  });

  console.log('\nüöÄ Verificando configuraci√≥n de Bun:');
  try {
    // Verificar si Bun est√° disponible
    const { execSync } = await import('child_process');
    const bunVersion = execSync('bun --version', { encoding: 'utf8' }).trim();
    console.log(`‚úÖ Bun version: ${bunVersion}`);
  } catch (error) {
    console.log(`‚ùå Bun no disponible: ${error.message}`);
  }

  console.log('\nüìã Scripts disponibles con Bun:');
  console.log('‚Ä¢ bun run build - Construir para producci√≥n');
  console.log('‚Ä¢ bun run start:prod - Iniciar en producci√≥n');
  console.log('‚Ä¢ bun run test:db - Probar base de datos');
  console.log('‚Ä¢ bun run test:env - Verificar entorno');
  console.log('‚Ä¢ bun run prisma:generate - Generar cliente Prisma');

  console.log('\nüí° RECOMENDACIONES PARA BUN:');
  console.log('1. Usa "bun run" en lugar de "npm run"');
  console.log('2. Aseg√∫rate de que el build complete: bun run build');
  console.log('3. Para Railway, configura el build command como: bun run build');
  console.log('4. Para Railway, configura el start command como: bun run start:prod');
}

checkEnvironment();
